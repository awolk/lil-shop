// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/awolk/lil-shop/backend/ent/cart"
	"github.com/awolk/lil-shop/backend/ent/item"
	"github.com/awolk/lil-shop/backend/ent/lineitem"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
)

// LineItem is the model entity for the LineItem schema.
type LineItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LineItemQuery when eager-loading is set.
	Edges           LineItemEdges `json:"edges"`
	cart_line_items *uuid.UUID
	line_item_item  *uuid.UUID
}

// LineItemEdges holds the relations/edges for other nodes in the graph.
type LineItemEdges struct {
	// Item holds the value of the item edge.
	Item *Item
	// Cart holds the value of the cart edge.
	Cart *Cart
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LineItemEdges) ItemOrErr() (*Item, error) {
	if e.loadedTypes[0] {
		if e.Item == nil {
			// The edge item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: item.Label}
		}
		return e.Item, nil
	}
	return nil, &NotLoadedError{edge: "item"}
}

// CartOrErr returns the Cart value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LineItemEdges) CartOrErr() (*Cart, error) {
	if e.loadedTypes[1] {
		if e.Cart == nil {
			// The edge cart was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cart.Label}
		}
		return e.Cart, nil
	}
	return nil, &NotLoadedError{edge: "cart"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LineItem) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},     // id
		&sql.NullInt64{}, // quantity
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*LineItem) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // cart_line_items
		&uuid.UUID{}, // line_item_item
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LineItem fields.
func (li *LineItem) assignValues(values ...interface{}) error {
	if m, n := len(values), len(lineitem.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		li.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field quantity", values[0])
	} else if value.Valid {
		li.Quantity = int(value.Int64)
	}
	values = values[1:]
	if len(values) == len(lineitem.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field cart_line_items", values[0])
		} else if value != nil {
			li.cart_line_items = value
		}
		if value, ok := values[1].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field line_item_item", values[1])
		} else if value != nil {
			li.line_item_item = value
		}
	}
	return nil
}

// QueryItem queries the item edge of the LineItem.
func (li *LineItem) QueryItem() *ItemQuery {
	return (&LineItemClient{config: li.config}).QueryItem(li)
}

// QueryCart queries the cart edge of the LineItem.
func (li *LineItem) QueryCart() *CartQuery {
	return (&LineItemClient{config: li.config}).QueryCart(li)
}

// Update returns a builder for updating this LineItem.
// Note that, you need to call LineItem.Unwrap() before calling this method, if this LineItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (li *LineItem) Update() *LineItemUpdateOne {
	return (&LineItemClient{config: li.config}).UpdateOne(li)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (li *LineItem) Unwrap() *LineItem {
	tx, ok := li.config.driver.(*txDriver)
	if !ok {
		panic("ent: LineItem is not a transactional entity")
	}
	li.config.driver = tx.drv
	return li
}

// String implements the fmt.Stringer.
func (li *LineItem) String() string {
	var builder strings.Builder
	builder.WriteString("LineItem(")
	builder.WriteString(fmt.Sprintf("id=%v", li.ID))
	builder.WriteString(", quantity=")
	builder.WriteString(fmt.Sprintf("%v", li.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// LineItems is a parsable slice of LineItem.
type LineItems []*LineItem

func (li LineItems) config(cfg config) {
	for _i := range li {
		li[_i].config = cfg
	}
}
