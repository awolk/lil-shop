// Code generated by entc, DO NOT EDIT.

package orderlineitem

import (
	"github.com/awolk/lil-shop/backend/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their identifier.
func ID(id uuid.UUID) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// UnitCostCents applies equality check predicate on the "unit_cost_cents" field. It's identical to UnitCostCentsEQ.
func UnitCostCents(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitCostCents), v))
	})
}

// Completed applies equality check predicate on the "completed" field. It's identical to CompletedEQ.
func Completed(v bool) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompleted), v))
	})
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantity), v))
	})
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.OrderLineItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderLineItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantity), v...))
	})
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.OrderLineItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderLineItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantity), v...))
	})
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantity), v))
	})
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantity), v))
	})
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantity), v))
	})
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantity), v))
	})
}

// UnitCostCentsEQ applies the EQ predicate on the "unit_cost_cents" field.
func UnitCostCentsEQ(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitCostCents), v))
	})
}

// UnitCostCentsNEQ applies the NEQ predicate on the "unit_cost_cents" field.
func UnitCostCentsNEQ(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitCostCents), v))
	})
}

// UnitCostCentsIn applies the In predicate on the "unit_cost_cents" field.
func UnitCostCentsIn(vs ...int) predicate.OrderLineItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderLineItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitCostCents), v...))
	})
}

// UnitCostCentsNotIn applies the NotIn predicate on the "unit_cost_cents" field.
func UnitCostCentsNotIn(vs ...int) predicate.OrderLineItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderLineItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitCostCents), v...))
	})
}

// UnitCostCentsGT applies the GT predicate on the "unit_cost_cents" field.
func UnitCostCentsGT(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitCostCents), v))
	})
}

// UnitCostCentsGTE applies the GTE predicate on the "unit_cost_cents" field.
func UnitCostCentsGTE(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitCostCents), v))
	})
}

// UnitCostCentsLT applies the LT predicate on the "unit_cost_cents" field.
func UnitCostCentsLT(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitCostCents), v))
	})
}

// UnitCostCentsLTE applies the LTE predicate on the "unit_cost_cents" field.
func UnitCostCentsLTE(v int) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitCostCents), v))
	})
}

// CompletedEQ applies the EQ predicate on the "completed" field.
func CompletedEQ(v bool) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompleted), v))
	})
}

// CompletedNEQ applies the NEQ predicate on the "completed" field.
func CompletedNEQ(v bool) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompleted), v))
	})
}

// HasItem applies the HasEdge predicate on the "item" edge.
func HasItem() predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ItemTable, ItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemWith applies the HasEdge predicate on the "item" edge with a given conditions (other predicates).
func HasItemWith(preds ...predicate.Item) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ItemTable, ItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOriginalLineItem applies the HasEdge predicate on the "original_line_item" edge.
func HasOriginalLineItem() predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OriginalLineItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OriginalLineItemTable, OriginalLineItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOriginalLineItemWith applies the HasEdge predicate on the "original_line_item" edge with a given conditions (other predicates).
func HasOriginalLineItemWith(preds ...predicate.LineItem) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OriginalLineItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OriginalLineItemTable, OriginalLineItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.OrderLineItem) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.OrderLineItem) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderLineItem) predicate.OrderLineItem {
	return predicate.OrderLineItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
