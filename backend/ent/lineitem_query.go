// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/awolk/lil-shop/backend/ent/cart"
	"github.com/awolk/lil-shop/backend/ent/item"
	"github.com/awolk/lil-shop/backend/ent/lineitem"
	"github.com/awolk/lil-shop/backend/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
)

// LineItemQuery is the builder for querying LineItem entities.
type LineItemQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.LineItem
	// eager-loading edges.
	withItem *ItemQuery
	withCart *CartQuery
	withFKs  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (liq *LineItemQuery) Where(ps ...predicate.LineItem) *LineItemQuery {
	liq.predicates = append(liq.predicates, ps...)
	return liq
}

// Limit adds a limit step to the query.
func (liq *LineItemQuery) Limit(limit int) *LineItemQuery {
	liq.limit = &limit
	return liq
}

// Offset adds an offset step to the query.
func (liq *LineItemQuery) Offset(offset int) *LineItemQuery {
	liq.offset = &offset
	return liq
}

// Order adds an order step to the query.
func (liq *LineItemQuery) Order(o ...OrderFunc) *LineItemQuery {
	liq.order = append(liq.order, o...)
	return liq
}

// QueryItem chains the current query on the item edge.
func (liq *LineItemQuery) QueryItem() *ItemQuery {
	query := &ItemQuery{config: liq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := liq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lineitem.Table, lineitem.FieldID, liq.sqlQuery()),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lineitem.ItemTable, lineitem.ItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(liq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCart chains the current query on the cart edge.
func (liq *LineItemQuery) QueryCart() *CartQuery {
	query := &CartQuery{config: liq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := liq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lineitem.Table, lineitem.FieldID, liq.sqlQuery()),
			sqlgraph.To(cart.Table, cart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lineitem.CartTable, lineitem.CartColumn),
		)
		fromU = sqlgraph.SetNeighbors(liq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LineItem entity in the query. Returns *NotFoundError when no lineitem was found.
func (liq *LineItemQuery) First(ctx context.Context) (*LineItem, error) {
	lis, err := liq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(lis) == 0 {
		return nil, &NotFoundError{lineitem.Label}
	}
	return lis[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (liq *LineItemQuery) FirstX(ctx context.Context) *LineItem {
	li, err := liq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return li
}

// FirstID returns the first LineItem id in the query. Returns *NotFoundError when no id was found.
func (liq *LineItemQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = liq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lineitem.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (liq *LineItemQuery) FirstXID(ctx context.Context) uuid.UUID {
	id, err := liq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only LineItem entity in the query, returns an error if not exactly one entity was returned.
func (liq *LineItemQuery) Only(ctx context.Context) (*LineItem, error) {
	lis, err := liq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(lis) {
	case 1:
		return lis[0], nil
	case 0:
		return nil, &NotFoundError{lineitem.Label}
	default:
		return nil, &NotSingularError{lineitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (liq *LineItemQuery) OnlyX(ctx context.Context) *LineItem {
	li, err := liq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return li
}

// OnlyID returns the only LineItem id in the query, returns an error if not exactly one id was returned.
func (liq *LineItemQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = liq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lineitem.Label}
	default:
		err = &NotSingularError{lineitem.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (liq *LineItemQuery) OnlyXID(ctx context.Context) uuid.UUID {
	id, err := liq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LineItems.
func (liq *LineItemQuery) All(ctx context.Context) ([]*LineItem, error) {
	if err := liq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return liq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (liq *LineItemQuery) AllX(ctx context.Context) []*LineItem {
	lis, err := liq.All(ctx)
	if err != nil {
		panic(err)
	}
	return lis
}

// IDs executes the query and returns a list of LineItem ids.
func (liq *LineItemQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := liq.Select(lineitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (liq *LineItemQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := liq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (liq *LineItemQuery) Count(ctx context.Context) (int, error) {
	if err := liq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return liq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (liq *LineItemQuery) CountX(ctx context.Context) int {
	count, err := liq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (liq *LineItemQuery) Exist(ctx context.Context) (bool, error) {
	if err := liq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return liq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (liq *LineItemQuery) ExistX(ctx context.Context) bool {
	exist, err := liq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (liq *LineItemQuery) Clone() *LineItemQuery {
	return &LineItemQuery{
		config:     liq.config,
		limit:      liq.limit,
		offset:     liq.offset,
		order:      append([]OrderFunc{}, liq.order...),
		unique:     append([]string{}, liq.unique...),
		predicates: append([]predicate.LineItem{}, liq.predicates...),
		// clone intermediate query.
		sql:  liq.sql.Clone(),
		path: liq.path,
	}
}

//  WithItem tells the query-builder to eager-loads the nodes that are connected to
// the "item" edge. The optional arguments used to configure the query builder of the edge.
func (liq *LineItemQuery) WithItem(opts ...func(*ItemQuery)) *LineItemQuery {
	query := &ItemQuery{config: liq.config}
	for _, opt := range opts {
		opt(query)
	}
	liq.withItem = query
	return liq
}

//  WithCart tells the query-builder to eager-loads the nodes that are connected to
// the "cart" edge. The optional arguments used to configure the query builder of the edge.
func (liq *LineItemQuery) WithCart(opts ...func(*CartQuery)) *LineItemQuery {
	query := &CartQuery{config: liq.config}
	for _, opt := range opts {
		opt(query)
	}
	liq.withCart = query
	return liq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LineItem.Query().
//		GroupBy(lineitem.FieldQuantity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (liq *LineItemQuery) GroupBy(field string, fields ...string) *LineItemGroupBy {
	group := &LineItemGroupBy{config: liq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := liq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return liq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//	}
//
//	client.LineItem.Query().
//		Select(lineitem.FieldQuantity).
//		Scan(ctx, &v)
//
func (liq *LineItemQuery) Select(field string, fields ...string) *LineItemSelect {
	selector := &LineItemSelect{config: liq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := liq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return liq.sqlQuery(), nil
	}
	return selector
}

func (liq *LineItemQuery) prepareQuery(ctx context.Context) error {
	if liq.path != nil {
		prev, err := liq.path(ctx)
		if err != nil {
			return err
		}
		liq.sql = prev
	}
	return nil
}

func (liq *LineItemQuery) sqlAll(ctx context.Context) ([]*LineItem, error) {
	var (
		nodes       = []*LineItem{}
		withFKs     = liq.withFKs
		_spec       = liq.querySpec()
		loadedTypes = [2]bool{
			liq.withItem != nil,
			liq.withCart != nil,
		}
	)
	if liq.withItem != nil || liq.withCart != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, lineitem.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &LineItem{config: liq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, liq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := liq.withItem; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*LineItem)
		for i := range nodes {
			if fk := nodes[i].line_item_item; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "line_item_item" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Item = n
			}
		}
	}

	if query := liq.withCart; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*LineItem)
		for i := range nodes {
			if fk := nodes[i].cart_line_items; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(cart.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "cart_line_items" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Cart = n
			}
		}
	}

	return nodes, nil
}

func (liq *LineItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := liq.querySpec()
	return sqlgraph.CountNodes(ctx, liq.driver, _spec)
}

func (liq *LineItemQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := liq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (liq *LineItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lineitem.Table,
			Columns: lineitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: lineitem.FieldID,
			},
		},
		From:   liq.sql,
		Unique: true,
	}
	if ps := liq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := liq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := liq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := liq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (liq *LineItemQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(liq.driver.Dialect())
	t1 := builder.Table(lineitem.Table)
	selector := builder.Select(t1.Columns(lineitem.Columns...)...).From(t1)
	if liq.sql != nil {
		selector = liq.sql
		selector.Select(selector.Columns(lineitem.Columns...)...)
	}
	for _, p := range liq.predicates {
		p(selector)
	}
	for _, p := range liq.order {
		p(selector)
	}
	if offset := liq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := liq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LineItemGroupBy is the builder for group-by LineItem entities.
type LineItemGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ligb *LineItemGroupBy) Aggregate(fns ...AggregateFunc) *LineItemGroupBy {
	ligb.fns = append(ligb.fns, fns...)
	return ligb
}

// Scan applies the group-by query and scan the result into the given value.
func (ligb *LineItemGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ligb.path(ctx)
	if err != nil {
		return err
	}
	ligb.sql = query
	return ligb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ligb *LineItemGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ligb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (ligb *LineItemGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ligb.fields) > 1 {
		return nil, errors.New("ent: LineItemGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ligb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ligb *LineItemGroupBy) StringsX(ctx context.Context) []string {
	v, err := ligb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (ligb *LineItemGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ligb.fields) > 1 {
		return nil, errors.New("ent: LineItemGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ligb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ligb *LineItemGroupBy) IntsX(ctx context.Context) []int {
	v, err := ligb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (ligb *LineItemGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ligb.fields) > 1 {
		return nil, errors.New("ent: LineItemGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ligb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ligb *LineItemGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ligb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (ligb *LineItemGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ligb.fields) > 1 {
		return nil, errors.New("ent: LineItemGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ligb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ligb *LineItemGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ligb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ligb *LineItemGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ligb.sqlQuery().Query()
	if err := ligb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ligb *LineItemGroupBy) sqlQuery() *sql.Selector {
	selector := ligb.sql
	columns := make([]string, 0, len(ligb.fields)+len(ligb.fns))
	columns = append(columns, ligb.fields...)
	for _, fn := range ligb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(ligb.fields...)
}

// LineItemSelect is the builder for select fields of LineItem entities.
type LineItemSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (lis *LineItemSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := lis.path(ctx)
	if err != nil {
		return err
	}
	lis.sql = query
	return lis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (lis *LineItemSelect) ScanX(ctx context.Context, v interface{}) {
	if err := lis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (lis *LineItemSelect) Strings(ctx context.Context) ([]string, error) {
	if len(lis.fields) > 1 {
		return nil, errors.New("ent: LineItemSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := lis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (lis *LineItemSelect) StringsX(ctx context.Context) []string {
	v, err := lis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (lis *LineItemSelect) Ints(ctx context.Context) ([]int, error) {
	if len(lis.fields) > 1 {
		return nil, errors.New("ent: LineItemSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := lis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (lis *LineItemSelect) IntsX(ctx context.Context) []int {
	v, err := lis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (lis *LineItemSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(lis.fields) > 1 {
		return nil, errors.New("ent: LineItemSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := lis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (lis *LineItemSelect) Float64sX(ctx context.Context) []float64 {
	v, err := lis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (lis *LineItemSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(lis.fields) > 1 {
		return nil, errors.New("ent: LineItemSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := lis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (lis *LineItemSelect) BoolsX(ctx context.Context) []bool {
	v, err := lis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lis *LineItemSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := lis.sqlQuery().Query()
	if err := lis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (lis *LineItemSelect) sqlQuery() sql.Querier {
	selector := lis.sql
	selector.Select(selector.Columns(lis.fields...)...)
	return selector
}
