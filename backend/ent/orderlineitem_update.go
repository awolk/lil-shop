// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/awolk/lil-shop/backend/ent/item"
	"github.com/awolk/lil-shop/backend/ent/lineitem"
	"github.com/awolk/lil-shop/backend/ent/order"
	"github.com/awolk/lil-shop/backend/ent/orderlineitem"
	"github.com/awolk/lil-shop/backend/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
)

// OrderLineItemUpdate is the builder for updating OrderLineItem entities.
type OrderLineItemUpdate struct {
	config
	hooks      []Hook
	mutation   *OrderLineItemMutation
	predicates []predicate.OrderLineItem
}

// Where adds a new predicate for the builder.
func (oliu *OrderLineItemUpdate) Where(ps ...predicate.OrderLineItem) *OrderLineItemUpdate {
	oliu.predicates = append(oliu.predicates, ps...)
	return oliu
}

// SetQuantity sets the quantity field.
func (oliu *OrderLineItemUpdate) SetQuantity(i int) *OrderLineItemUpdate {
	oliu.mutation.ResetQuantity()
	oliu.mutation.SetQuantity(i)
	return oliu
}

// AddQuantity adds i to quantity.
func (oliu *OrderLineItemUpdate) AddQuantity(i int) *OrderLineItemUpdate {
	oliu.mutation.AddQuantity(i)
	return oliu
}

// SetUnitCostCents sets the unit_cost_cents field.
func (oliu *OrderLineItemUpdate) SetUnitCostCents(i int) *OrderLineItemUpdate {
	oliu.mutation.ResetUnitCostCents()
	oliu.mutation.SetUnitCostCents(i)
	return oliu
}

// AddUnitCostCents adds i to unit_cost_cents.
func (oliu *OrderLineItemUpdate) AddUnitCostCents(i int) *OrderLineItemUpdate {
	oliu.mutation.AddUnitCostCents(i)
	return oliu
}

// SetItemID sets the item edge to Item by id.
func (oliu *OrderLineItemUpdate) SetItemID(id uuid.UUID) *OrderLineItemUpdate {
	oliu.mutation.SetItemID(id)
	return oliu
}

// SetItem sets the item edge to Item.
func (oliu *OrderLineItemUpdate) SetItem(i *Item) *OrderLineItemUpdate {
	return oliu.SetItemID(i.ID)
}

// SetOrderID sets the order edge to Order by id.
func (oliu *OrderLineItemUpdate) SetOrderID(id uuid.UUID) *OrderLineItemUpdate {
	oliu.mutation.SetOrderID(id)
	return oliu
}

// SetOrder sets the order edge to Order.
func (oliu *OrderLineItemUpdate) SetOrder(o *Order) *OrderLineItemUpdate {
	return oliu.SetOrderID(o.ID)
}

// SetOriginalLineItemID sets the original_line_item edge to LineItem by id.
func (oliu *OrderLineItemUpdate) SetOriginalLineItemID(id uuid.UUID) *OrderLineItemUpdate {
	oliu.mutation.SetOriginalLineItemID(id)
	return oliu
}

// SetNillableOriginalLineItemID sets the original_line_item edge to LineItem by id if the given value is not nil.
func (oliu *OrderLineItemUpdate) SetNillableOriginalLineItemID(id *uuid.UUID) *OrderLineItemUpdate {
	if id != nil {
		oliu = oliu.SetOriginalLineItemID(*id)
	}
	return oliu
}

// SetOriginalLineItem sets the original_line_item edge to LineItem.
func (oliu *OrderLineItemUpdate) SetOriginalLineItem(l *LineItem) *OrderLineItemUpdate {
	return oliu.SetOriginalLineItemID(l.ID)
}

// Mutation returns the OrderLineItemMutation object of the builder.
func (oliu *OrderLineItemUpdate) Mutation() *OrderLineItemMutation {
	return oliu.mutation
}

// ClearItem clears the item edge to Item.
func (oliu *OrderLineItemUpdate) ClearItem() *OrderLineItemUpdate {
	oliu.mutation.ClearItem()
	return oliu
}

// ClearOrder clears the order edge to Order.
func (oliu *OrderLineItemUpdate) ClearOrder() *OrderLineItemUpdate {
	oliu.mutation.ClearOrder()
	return oliu
}

// ClearOriginalLineItem clears the original_line_item edge to LineItem.
func (oliu *OrderLineItemUpdate) ClearOriginalLineItem() *OrderLineItemUpdate {
	oliu.mutation.ClearOriginalLineItem()
	return oliu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (oliu *OrderLineItemUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := oliu.mutation.Quantity(); ok {
		if err := orderlineitem.QuantityValidator(v); err != nil {
			return 0, &ValidationError{Name: "quantity", err: fmt.Errorf("ent: validator failed for field \"quantity\": %w", err)}
		}
	}
	if v, ok := oliu.mutation.UnitCostCents(); ok {
		if err := orderlineitem.UnitCostCentsValidator(v); err != nil {
			return 0, &ValidationError{Name: "unit_cost_cents", err: fmt.Errorf("ent: validator failed for field \"unit_cost_cents\": %w", err)}
		}
	}

	if _, ok := oliu.mutation.ItemID(); oliu.mutation.ItemCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"item\"")
	}

	if _, ok := oliu.mutation.OrderID(); oliu.mutation.OrderCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"order\"")
	}

	var (
		err      error
		affected int
	)
	if len(oliu.hooks) == 0 {
		affected, err = oliu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderLineItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oliu.mutation = mutation
			affected, err = oliu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oliu.hooks) - 1; i >= 0; i-- {
			mut = oliu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oliu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oliu *OrderLineItemUpdate) SaveX(ctx context.Context) int {
	affected, err := oliu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oliu *OrderLineItemUpdate) Exec(ctx context.Context) error {
	_, err := oliu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oliu *OrderLineItemUpdate) ExecX(ctx context.Context) {
	if err := oliu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oliu *OrderLineItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderlineitem.Table,
			Columns: orderlineitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: orderlineitem.FieldID,
			},
		},
	}
	if ps := oliu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oliu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderlineitem.FieldQuantity,
		})
	}
	if value, ok := oliu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderlineitem.FieldQuantity,
		})
	}
	if value, ok := oliu.mutation.UnitCostCents(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderlineitem.FieldUnitCostCents,
		})
	}
	if value, ok := oliu.mutation.AddedUnitCostCents(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderlineitem.FieldUnitCostCents,
		})
	}
	if oliu.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderlineitem.ItemTable,
			Columns: []string{orderlineitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oliu.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderlineitem.ItemTable,
			Columns: []string{orderlineitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oliu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderlineitem.OrderTable,
			Columns: []string{orderlineitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oliu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderlineitem.OrderTable,
			Columns: []string{orderlineitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oliu.mutation.OriginalLineItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderlineitem.OriginalLineItemTable,
			Columns: []string{orderlineitem.OriginalLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: lineitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oliu.mutation.OriginalLineItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderlineitem.OriginalLineItemTable,
			Columns: []string{orderlineitem.OriginalLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: lineitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oliu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderlineitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderLineItemUpdateOne is the builder for updating a single OrderLineItem entity.
type OrderLineItemUpdateOne struct {
	config
	hooks    []Hook
	mutation *OrderLineItemMutation
}

// SetQuantity sets the quantity field.
func (oliuo *OrderLineItemUpdateOne) SetQuantity(i int) *OrderLineItemUpdateOne {
	oliuo.mutation.ResetQuantity()
	oliuo.mutation.SetQuantity(i)
	return oliuo
}

// AddQuantity adds i to quantity.
func (oliuo *OrderLineItemUpdateOne) AddQuantity(i int) *OrderLineItemUpdateOne {
	oliuo.mutation.AddQuantity(i)
	return oliuo
}

// SetUnitCostCents sets the unit_cost_cents field.
func (oliuo *OrderLineItemUpdateOne) SetUnitCostCents(i int) *OrderLineItemUpdateOne {
	oliuo.mutation.ResetUnitCostCents()
	oliuo.mutation.SetUnitCostCents(i)
	return oliuo
}

// AddUnitCostCents adds i to unit_cost_cents.
func (oliuo *OrderLineItemUpdateOne) AddUnitCostCents(i int) *OrderLineItemUpdateOne {
	oliuo.mutation.AddUnitCostCents(i)
	return oliuo
}

// SetItemID sets the item edge to Item by id.
func (oliuo *OrderLineItemUpdateOne) SetItemID(id uuid.UUID) *OrderLineItemUpdateOne {
	oliuo.mutation.SetItemID(id)
	return oliuo
}

// SetItem sets the item edge to Item.
func (oliuo *OrderLineItemUpdateOne) SetItem(i *Item) *OrderLineItemUpdateOne {
	return oliuo.SetItemID(i.ID)
}

// SetOrderID sets the order edge to Order by id.
func (oliuo *OrderLineItemUpdateOne) SetOrderID(id uuid.UUID) *OrderLineItemUpdateOne {
	oliuo.mutation.SetOrderID(id)
	return oliuo
}

// SetOrder sets the order edge to Order.
func (oliuo *OrderLineItemUpdateOne) SetOrder(o *Order) *OrderLineItemUpdateOne {
	return oliuo.SetOrderID(o.ID)
}

// SetOriginalLineItemID sets the original_line_item edge to LineItem by id.
func (oliuo *OrderLineItemUpdateOne) SetOriginalLineItemID(id uuid.UUID) *OrderLineItemUpdateOne {
	oliuo.mutation.SetOriginalLineItemID(id)
	return oliuo
}

// SetNillableOriginalLineItemID sets the original_line_item edge to LineItem by id if the given value is not nil.
func (oliuo *OrderLineItemUpdateOne) SetNillableOriginalLineItemID(id *uuid.UUID) *OrderLineItemUpdateOne {
	if id != nil {
		oliuo = oliuo.SetOriginalLineItemID(*id)
	}
	return oliuo
}

// SetOriginalLineItem sets the original_line_item edge to LineItem.
func (oliuo *OrderLineItemUpdateOne) SetOriginalLineItem(l *LineItem) *OrderLineItemUpdateOne {
	return oliuo.SetOriginalLineItemID(l.ID)
}

// Mutation returns the OrderLineItemMutation object of the builder.
func (oliuo *OrderLineItemUpdateOne) Mutation() *OrderLineItemMutation {
	return oliuo.mutation
}

// ClearItem clears the item edge to Item.
func (oliuo *OrderLineItemUpdateOne) ClearItem() *OrderLineItemUpdateOne {
	oliuo.mutation.ClearItem()
	return oliuo
}

// ClearOrder clears the order edge to Order.
func (oliuo *OrderLineItemUpdateOne) ClearOrder() *OrderLineItemUpdateOne {
	oliuo.mutation.ClearOrder()
	return oliuo
}

// ClearOriginalLineItem clears the original_line_item edge to LineItem.
func (oliuo *OrderLineItemUpdateOne) ClearOriginalLineItem() *OrderLineItemUpdateOne {
	oliuo.mutation.ClearOriginalLineItem()
	return oliuo
}

// Save executes the query and returns the updated entity.
func (oliuo *OrderLineItemUpdateOne) Save(ctx context.Context) (*OrderLineItem, error) {
	if v, ok := oliuo.mutation.Quantity(); ok {
		if err := orderlineitem.QuantityValidator(v); err != nil {
			return nil, &ValidationError{Name: "quantity", err: fmt.Errorf("ent: validator failed for field \"quantity\": %w", err)}
		}
	}
	if v, ok := oliuo.mutation.UnitCostCents(); ok {
		if err := orderlineitem.UnitCostCentsValidator(v); err != nil {
			return nil, &ValidationError{Name: "unit_cost_cents", err: fmt.Errorf("ent: validator failed for field \"unit_cost_cents\": %w", err)}
		}
	}

	if _, ok := oliuo.mutation.ItemID(); oliuo.mutation.ItemCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"item\"")
	}

	if _, ok := oliuo.mutation.OrderID(); oliuo.mutation.OrderCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"order\"")
	}

	var (
		err  error
		node *OrderLineItem
	)
	if len(oliuo.hooks) == 0 {
		node, err = oliuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderLineItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oliuo.mutation = mutation
			node, err = oliuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oliuo.hooks) - 1; i >= 0; i-- {
			mut = oliuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oliuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oliuo *OrderLineItemUpdateOne) SaveX(ctx context.Context) *OrderLineItem {
	oli, err := oliuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return oli
}

// Exec executes the query on the entity.
func (oliuo *OrderLineItemUpdateOne) Exec(ctx context.Context) error {
	_, err := oliuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oliuo *OrderLineItemUpdateOne) ExecX(ctx context.Context) {
	if err := oliuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oliuo *OrderLineItemUpdateOne) sqlSave(ctx context.Context) (oli *OrderLineItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderlineitem.Table,
			Columns: orderlineitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: orderlineitem.FieldID,
			},
		},
	}
	id, ok := oliuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderLineItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := oliuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderlineitem.FieldQuantity,
		})
	}
	if value, ok := oliuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderlineitem.FieldQuantity,
		})
	}
	if value, ok := oliuo.mutation.UnitCostCents(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderlineitem.FieldUnitCostCents,
		})
	}
	if value, ok := oliuo.mutation.AddedUnitCostCents(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderlineitem.FieldUnitCostCents,
		})
	}
	if oliuo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderlineitem.ItemTable,
			Columns: []string{orderlineitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oliuo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderlineitem.ItemTable,
			Columns: []string{orderlineitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oliuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderlineitem.OrderTable,
			Columns: []string{orderlineitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oliuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderlineitem.OrderTable,
			Columns: []string{orderlineitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oliuo.mutation.OriginalLineItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderlineitem.OriginalLineItemTable,
			Columns: []string{orderlineitem.OriginalLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: lineitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oliuo.mutation.OriginalLineItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderlineitem.OriginalLineItemTable,
			Columns: []string{orderlineitem.OriginalLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: lineitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	oli = &OrderLineItem{config: oliuo.config}
	_spec.Assign = oli.assignValues
	_spec.ScanValues = oli.scanValues()
	if err = sqlgraph.UpdateNode(ctx, oliuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderlineitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return oli, nil
}
