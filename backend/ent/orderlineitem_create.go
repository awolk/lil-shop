// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/awolk/lil-shop/backend/ent/item"
	"github.com/awolk/lil-shop/backend/ent/lineitem"
	"github.com/awolk/lil-shop/backend/ent/order"
	"github.com/awolk/lil-shop/backend/ent/orderlineitem"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
)

// OrderLineItemCreate is the builder for creating a OrderLineItem entity.
type OrderLineItemCreate struct {
	config
	mutation *OrderLineItemMutation
	hooks    []Hook
}

// SetQuantity sets the quantity field.
func (olic *OrderLineItemCreate) SetQuantity(i int) *OrderLineItemCreate {
	olic.mutation.SetQuantity(i)
	return olic
}

// SetUnitCostCents sets the unit_cost_cents field.
func (olic *OrderLineItemCreate) SetUnitCostCents(i int) *OrderLineItemCreate {
	olic.mutation.SetUnitCostCents(i)
	return olic
}

// SetCompleted sets the completed field.
func (olic *OrderLineItemCreate) SetCompleted(b bool) *OrderLineItemCreate {
	olic.mutation.SetCompleted(b)
	return olic
}

// SetNillableCompleted sets the completed field if the given value is not nil.
func (olic *OrderLineItemCreate) SetNillableCompleted(b *bool) *OrderLineItemCreate {
	if b != nil {
		olic.SetCompleted(*b)
	}
	return olic
}

// SetID sets the id field.
func (olic *OrderLineItemCreate) SetID(u uuid.UUID) *OrderLineItemCreate {
	olic.mutation.SetID(u)
	return olic
}

// SetItemID sets the item edge to Item by id.
func (olic *OrderLineItemCreate) SetItemID(id uuid.UUID) *OrderLineItemCreate {
	olic.mutation.SetItemID(id)
	return olic
}

// SetItem sets the item edge to Item.
func (olic *OrderLineItemCreate) SetItem(i *Item) *OrderLineItemCreate {
	return olic.SetItemID(i.ID)
}

// SetOrderID sets the order edge to Order by id.
func (olic *OrderLineItemCreate) SetOrderID(id uuid.UUID) *OrderLineItemCreate {
	olic.mutation.SetOrderID(id)
	return olic
}

// SetOrder sets the order edge to Order.
func (olic *OrderLineItemCreate) SetOrder(o *Order) *OrderLineItemCreate {
	return olic.SetOrderID(o.ID)
}

// SetOriginalLineItemID sets the original_line_item edge to LineItem by id.
func (olic *OrderLineItemCreate) SetOriginalLineItemID(id uuid.UUID) *OrderLineItemCreate {
	olic.mutation.SetOriginalLineItemID(id)
	return olic
}

// SetNillableOriginalLineItemID sets the original_line_item edge to LineItem by id if the given value is not nil.
func (olic *OrderLineItemCreate) SetNillableOriginalLineItemID(id *uuid.UUID) *OrderLineItemCreate {
	if id != nil {
		olic = olic.SetOriginalLineItemID(*id)
	}
	return olic
}

// SetOriginalLineItem sets the original_line_item edge to LineItem.
func (olic *OrderLineItemCreate) SetOriginalLineItem(l *LineItem) *OrderLineItemCreate {
	return olic.SetOriginalLineItemID(l.ID)
}

// Mutation returns the OrderLineItemMutation object of the builder.
func (olic *OrderLineItemCreate) Mutation() *OrderLineItemMutation {
	return olic.mutation
}

// Save creates the OrderLineItem in the database.
func (olic *OrderLineItemCreate) Save(ctx context.Context) (*OrderLineItem, error) {
	if _, ok := olic.mutation.Quantity(); !ok {
		return nil, errors.New("ent: missing required field \"quantity\"")
	}
	if v, ok := olic.mutation.Quantity(); ok {
		if err := orderlineitem.QuantityValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"quantity\": %w", err)
		}
	}
	if _, ok := olic.mutation.UnitCostCents(); !ok {
		return nil, errors.New("ent: missing required field \"unit_cost_cents\"")
	}
	if v, ok := olic.mutation.UnitCostCents(); ok {
		if err := orderlineitem.UnitCostCentsValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"unit_cost_cents\": %w", err)
		}
	}
	if _, ok := olic.mutation.Completed(); !ok {
		v := orderlineitem.DefaultCompleted
		olic.mutation.SetCompleted(v)
	}
	if _, ok := olic.mutation.ID(); !ok {
		v := orderlineitem.DefaultID()
		olic.mutation.SetID(v)
	}
	if _, ok := olic.mutation.ItemID(); !ok {
		return nil, errors.New("ent: missing required edge \"item\"")
	}
	if _, ok := olic.mutation.OrderID(); !ok {
		return nil, errors.New("ent: missing required edge \"order\"")
	}
	var (
		err  error
		node *OrderLineItem
	)
	if len(olic.hooks) == 0 {
		node, err = olic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderLineItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			olic.mutation = mutation
			node, err = olic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(olic.hooks) - 1; i >= 0; i-- {
			mut = olic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, olic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (olic *OrderLineItemCreate) SaveX(ctx context.Context) *OrderLineItem {
	v, err := olic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (olic *OrderLineItemCreate) sqlSave(ctx context.Context) (*OrderLineItem, error) {
	var (
		oli   = &OrderLineItem{config: olic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderlineitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: orderlineitem.FieldID,
			},
		}
	)
	if id, ok := olic.mutation.ID(); ok {
		oli.ID = id
		_spec.ID.Value = id
	}
	if value, ok := olic.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderlineitem.FieldQuantity,
		})
		oli.Quantity = value
	}
	if value, ok := olic.mutation.UnitCostCents(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderlineitem.FieldUnitCostCents,
		})
		oli.UnitCostCents = value
	}
	if value, ok := olic.mutation.Completed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: orderlineitem.FieldCompleted,
		})
		oli.Completed = value
	}
	if nodes := olic.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderlineitem.ItemTable,
			Columns: []string{orderlineitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := olic.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderlineitem.OrderTable,
			Columns: []string{orderlineitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := olic.mutation.OriginalLineItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderlineitem.OriginalLineItemTable,
			Columns: []string{orderlineitem.OriginalLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: lineitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, olic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return oli, nil
}
