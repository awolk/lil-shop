// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/awolk/lil-shop/backend/ent/cart"
	"github.com/google/uuid"
)

// Cart is the model entity for the Cart schema.
type Cart struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CartQuery when eager-loading is set.
	Edges CartEdges `json:"edges"`
}

// CartEdges holds the relations/edges for other nodes in the graph.
type CartEdges struct {
	// LineItems holds the value of the line_items edge.
	LineItems []*LineItem
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LineItemsOrErr returns the LineItems value or an error if the edge
// was not loaded in eager-loading.
func (e CartEdges) LineItemsOrErr() ([]*LineItem, error) {
	if e.loadedTypes[0] {
		return e.LineItems, nil
	}
	return nil, &NotLoadedError{edge: "line_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cart) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cart fields.
func (c *Cart) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cart.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		c.ID = *value
	}
	values = values[1:]
	return nil
}

// QueryLineItems queries the line_items edge of the Cart.
func (c *Cart) QueryLineItems() *LineItemQuery {
	return (&CartClient{config: c.config}).QueryLineItems(c)
}

// Update returns a builder for updating this Cart.
// Note that, you need to call Cart.Unwrap() before calling this method, if this Cart
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cart) Update() *CartUpdateOne {
	return (&CartClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Cart) Unwrap() *Cart {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cart is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cart) String() string {
	var builder strings.Builder
	builder.WriteString("Cart(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Carts is a parsable slice of Cart.
type Carts []*Cart

func (c Carts) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
