// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/awolk/lil-shop/backend/ent/migrate"
	"github.com/google/uuid"

	"github.com/awolk/lil-shop/backend/ent/cart"
	"github.com/awolk/lil-shop/backend/ent/item"
	"github.com/awolk/lil-shop/backend/ent/lineitem"
	"github.com/awolk/lil-shop/backend/ent/order"
	"github.com/awolk/lil-shop/backend/ent/orderlineitem"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Cart is the client for interacting with the Cart builders.
	Cart *CartClient
	// Item is the client for interacting with the Item builders.
	Item *ItemClient
	// LineItem is the client for interacting with the LineItem builders.
	LineItem *LineItemClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderLineItem is the client for interacting with the OrderLineItem builders.
	OrderLineItem *OrderLineItemClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Cart = NewCartClient(c.config)
	c.Item = NewItemClient(c.config)
	c.LineItem = NewLineItemClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderLineItem = NewOrderLineItemClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		Cart:          NewCartClient(cfg),
		Item:          NewItemClient(cfg),
		LineItem:      NewLineItemClient(cfg),
		Order:         NewOrderClient(cfg),
		OrderLineItem: NewOrderLineItemClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		Cart:          NewCartClient(cfg),
		Item:          NewItemClient(cfg),
		LineItem:      NewLineItemClient(cfg),
		Order:         NewOrderClient(cfg),
		OrderLineItem: NewOrderLineItemClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Cart.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Cart.Use(hooks...)
	c.Item.Use(hooks...)
	c.LineItem.Use(hooks...)
	c.Order.Use(hooks...)
	c.OrderLineItem.Use(hooks...)
}

// CartClient is a client for the Cart schema.
type CartClient struct {
	config
}

// NewCartClient returns a client for the Cart from the given config.
func NewCartClient(c config) *CartClient {
	return &CartClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cart.Hooks(f(g(h())))`.
func (c *CartClient) Use(hooks ...Hook) {
	c.hooks.Cart = append(c.hooks.Cart, hooks...)
}

// Create returns a create builder for Cart.
func (c *CartClient) Create() *CartCreate {
	mutation := newCartMutation(c.config, OpCreate)
	return &CartCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Cart.
func (c *CartClient) Update() *CartUpdate {
	mutation := newCartMutation(c.config, OpUpdate)
	return &CartUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CartClient) UpdateOne(ca *Cart) *CartUpdateOne {
	mutation := newCartMutation(c.config, OpUpdateOne, withCart(ca))
	return &CartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CartClient) UpdateOneID(id uuid.UUID) *CartUpdateOne {
	mutation := newCartMutation(c.config, OpUpdateOne, withCartID(id))
	return &CartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cart.
func (c *CartClient) Delete() *CartDelete {
	mutation := newCartMutation(c.config, OpDelete)
	return &CartDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CartClient) DeleteOne(ca *Cart) *CartDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CartClient) DeleteOneID(id uuid.UUID) *CartDeleteOne {
	builder := c.Delete().Where(cart.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CartDeleteOne{builder}
}

// Create returns a query builder for Cart.
func (c *CartClient) Query() *CartQuery {
	return &CartQuery{config: c.config}
}

// Get returns a Cart entity by its id.
func (c *CartClient) Get(ctx context.Context, id uuid.UUID) (*Cart, error) {
	return c.Query().Where(cart.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CartClient) GetX(ctx context.Context, id uuid.UUID) *Cart {
	ca, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ca
}

// QueryLineItems queries the line_items edge of a Cart.
func (c *CartClient) QueryLineItems(ca *Cart) *LineItemQuery {
	query := &LineItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cart.Table, cart.FieldID, id),
			sqlgraph.To(lineitem.Table, lineitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cart.LineItemsTable, cart.LineItemsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CartClient) Hooks() []Hook {
	return c.hooks.Cart
}

// ItemClient is a client for the Item schema.
type ItemClient struct {
	config
}

// NewItemClient returns a client for the Item from the given config.
func NewItemClient(c config) *ItemClient {
	return &ItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `item.Hooks(f(g(h())))`.
func (c *ItemClient) Use(hooks ...Hook) {
	c.hooks.Item = append(c.hooks.Item, hooks...)
}

// Create returns a create builder for Item.
func (c *ItemClient) Create() *ItemCreate {
	mutation := newItemMutation(c.config, OpCreate)
	return &ItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Item.
func (c *ItemClient) Update() *ItemUpdate {
	mutation := newItemMutation(c.config, OpUpdate)
	return &ItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ItemClient) UpdateOne(i *Item) *ItemUpdateOne {
	mutation := newItemMutation(c.config, OpUpdateOne, withItem(i))
	return &ItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ItemClient) UpdateOneID(id uuid.UUID) *ItemUpdateOne {
	mutation := newItemMutation(c.config, OpUpdateOne, withItemID(id))
	return &ItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Item.
func (c *ItemClient) Delete() *ItemDelete {
	mutation := newItemMutation(c.config, OpDelete)
	return &ItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ItemClient) DeleteOne(i *Item) *ItemDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ItemClient) DeleteOneID(id uuid.UUID) *ItemDeleteOne {
	builder := c.Delete().Where(item.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ItemDeleteOne{builder}
}

// Create returns a query builder for Item.
func (c *ItemClient) Query() *ItemQuery {
	return &ItemQuery{config: c.config}
}

// Get returns a Item entity by its id.
func (c *ItemClient) Get(ctx context.Context, id uuid.UUID) (*Item, error) {
	return c.Query().Where(item.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ItemClient) GetX(ctx context.Context, id uuid.UUID) *Item {
	i, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return i
}

// Hooks returns the client hooks.
func (c *ItemClient) Hooks() []Hook {
	return c.hooks.Item
}

// LineItemClient is a client for the LineItem schema.
type LineItemClient struct {
	config
}

// NewLineItemClient returns a client for the LineItem from the given config.
func NewLineItemClient(c config) *LineItemClient {
	return &LineItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lineitem.Hooks(f(g(h())))`.
func (c *LineItemClient) Use(hooks ...Hook) {
	c.hooks.LineItem = append(c.hooks.LineItem, hooks...)
}

// Create returns a create builder for LineItem.
func (c *LineItemClient) Create() *LineItemCreate {
	mutation := newLineItemMutation(c.config, OpCreate)
	return &LineItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for LineItem.
func (c *LineItemClient) Update() *LineItemUpdate {
	mutation := newLineItemMutation(c.config, OpUpdate)
	return &LineItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LineItemClient) UpdateOne(li *LineItem) *LineItemUpdateOne {
	mutation := newLineItemMutation(c.config, OpUpdateOne, withLineItem(li))
	return &LineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LineItemClient) UpdateOneID(id uuid.UUID) *LineItemUpdateOne {
	mutation := newLineItemMutation(c.config, OpUpdateOne, withLineItemID(id))
	return &LineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LineItem.
func (c *LineItemClient) Delete() *LineItemDelete {
	mutation := newLineItemMutation(c.config, OpDelete)
	return &LineItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LineItemClient) DeleteOne(li *LineItem) *LineItemDeleteOne {
	return c.DeleteOneID(li.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LineItemClient) DeleteOneID(id uuid.UUID) *LineItemDeleteOne {
	builder := c.Delete().Where(lineitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LineItemDeleteOne{builder}
}

// Create returns a query builder for LineItem.
func (c *LineItemClient) Query() *LineItemQuery {
	return &LineItemQuery{config: c.config}
}

// Get returns a LineItem entity by its id.
func (c *LineItemClient) Get(ctx context.Context, id uuid.UUID) (*LineItem, error) {
	return c.Query().Where(lineitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LineItemClient) GetX(ctx context.Context, id uuid.UUID) *LineItem {
	li, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return li
}

// QueryItem queries the item edge of a LineItem.
func (c *LineItemClient) QueryItem(li *LineItem) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := li.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lineitem.Table, lineitem.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lineitem.ItemTable, lineitem.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(li.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCart queries the cart edge of a LineItem.
func (c *LineItemClient) QueryCart(li *LineItem) *CartQuery {
	query := &CartQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := li.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lineitem.Table, lineitem.FieldID, id),
			sqlgraph.To(cart.Table, cart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lineitem.CartTable, lineitem.CartColumn),
		)
		fromV = sqlgraph.Neighbors(li.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LineItemClient) Hooks() []Hook {
	return c.hooks.LineItem
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Create returns a create builder for Order.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id uuid.UUID) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderClient) DeleteOneID(id uuid.UUID) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Create returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{config: c.config}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id uuid.UUID) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id uuid.UUID) *Order {
	o, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return o
}

// QueryOrderLineItems queries the order_line_items edge of a Order.
func (c *OrderClient) QueryOrderLineItems(o *Order) *OrderLineItemQuery {
	query := &OrderLineItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderlineitem.Table, orderlineitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.OrderLineItemsTable, order.OrderLineItemsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// OrderLineItemClient is a client for the OrderLineItem schema.
type OrderLineItemClient struct {
	config
}

// NewOrderLineItemClient returns a client for the OrderLineItem from the given config.
func NewOrderLineItemClient(c config) *OrderLineItemClient {
	return &OrderLineItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderlineitem.Hooks(f(g(h())))`.
func (c *OrderLineItemClient) Use(hooks ...Hook) {
	c.hooks.OrderLineItem = append(c.hooks.OrderLineItem, hooks...)
}

// Create returns a create builder for OrderLineItem.
func (c *OrderLineItemClient) Create() *OrderLineItemCreate {
	mutation := newOrderLineItemMutation(c.config, OpCreate)
	return &OrderLineItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for OrderLineItem.
func (c *OrderLineItemClient) Update() *OrderLineItemUpdate {
	mutation := newOrderLineItemMutation(c.config, OpUpdate)
	return &OrderLineItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderLineItemClient) UpdateOne(oli *OrderLineItem) *OrderLineItemUpdateOne {
	mutation := newOrderLineItemMutation(c.config, OpUpdateOne, withOrderLineItem(oli))
	return &OrderLineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderLineItemClient) UpdateOneID(id uuid.UUID) *OrderLineItemUpdateOne {
	mutation := newOrderLineItemMutation(c.config, OpUpdateOne, withOrderLineItemID(id))
	return &OrderLineItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderLineItem.
func (c *OrderLineItemClient) Delete() *OrderLineItemDelete {
	mutation := newOrderLineItemMutation(c.config, OpDelete)
	return &OrderLineItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderLineItemClient) DeleteOne(oli *OrderLineItem) *OrderLineItemDeleteOne {
	return c.DeleteOneID(oli.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderLineItemClient) DeleteOneID(id uuid.UUID) *OrderLineItemDeleteOne {
	builder := c.Delete().Where(orderlineitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderLineItemDeleteOne{builder}
}

// Create returns a query builder for OrderLineItem.
func (c *OrderLineItemClient) Query() *OrderLineItemQuery {
	return &OrderLineItemQuery{config: c.config}
}

// Get returns a OrderLineItem entity by its id.
func (c *OrderLineItemClient) Get(ctx context.Context, id uuid.UUID) (*OrderLineItem, error) {
	return c.Query().Where(orderlineitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderLineItemClient) GetX(ctx context.Context, id uuid.UUID) *OrderLineItem {
	oli, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return oli
}

// QueryItem queries the item edge of a OrderLineItem.
func (c *OrderLineItemClient) QueryItem(oli *OrderLineItem) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oli.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderlineitem.Table, orderlineitem.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderlineitem.ItemTable, orderlineitem.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(oli.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a OrderLineItem.
func (c *OrderLineItemClient) QueryOrder(oli *OrderLineItem) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oli.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderlineitem.Table, orderlineitem.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderlineitem.OrderTable, orderlineitem.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(oli.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOriginalLineItem queries the original_line_item edge of a OrderLineItem.
func (c *OrderLineItemClient) QueryOriginalLineItem(oli *OrderLineItem) *LineItemQuery {
	query := &LineItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oli.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderlineitem.Table, orderlineitem.FieldID, id),
			sqlgraph.To(lineitem.Table, lineitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderlineitem.OriginalLineItemTable, orderlineitem.OriginalLineItemColumn),
		)
		fromV = sqlgraph.Neighbors(oli.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderLineItemClient) Hooks() []Hook {
	return c.hooks.OrderLineItem
}
