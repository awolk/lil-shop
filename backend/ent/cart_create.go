// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/awolk/lil-shop/backend/ent/cart"
	"github.com/awolk/lil-shop/backend/ent/lineitem"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
)

// CartCreate is the builder for creating a Cart entity.
type CartCreate struct {
	config
	mutation *CartMutation
	hooks    []Hook
}

// SetPaymentIntentID sets the payment_intent_id field.
func (cc *CartCreate) SetPaymentIntentID(s string) *CartCreate {
	cc.mutation.SetPaymentIntentID(s)
	return cc
}

// SetNillablePaymentIntentID sets the payment_intent_id field if the given value is not nil.
func (cc *CartCreate) SetNillablePaymentIntentID(s *string) *CartCreate {
	if s != nil {
		cc.SetPaymentIntentID(*s)
	}
	return cc
}

// SetID sets the id field.
func (cc *CartCreate) SetID(u uuid.UUID) *CartCreate {
	cc.mutation.SetID(u)
	return cc
}

// AddLineItemIDs adds the line_items edge to LineItem by ids.
func (cc *CartCreate) AddLineItemIDs(ids ...uuid.UUID) *CartCreate {
	cc.mutation.AddLineItemIDs(ids...)
	return cc
}

// AddLineItems adds the line_items edges to LineItem.
func (cc *CartCreate) AddLineItems(l ...*LineItem) *CartCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cc.AddLineItemIDs(ids...)
}

// Mutation returns the CartMutation object of the builder.
func (cc *CartCreate) Mutation() *CartMutation {
	return cc.mutation
}

// Save creates the Cart in the database.
func (cc *CartCreate) Save(ctx context.Context) (*Cart, error) {
	if _, ok := cc.mutation.ID(); !ok {
		v := cart.DefaultID()
		cc.mutation.SetID(v)
	}
	var (
		err  error
		node *Cart
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CartCreate) SaveX(ctx context.Context) *Cart {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CartCreate) sqlSave(ctx context.Context) (*Cart, error) {
	var (
		c     = &Cart{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cart.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: cart.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		c.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.PaymentIntentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cart.FieldPaymentIntentID,
		})
		c.PaymentIntentID = value
	}
	if nodes := cc.mutation.LineItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.LineItemsTable,
			Columns: []string{cart.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: lineitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
