// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/awolk/lil-shop/backend/ent/item"
	"github.com/awolk/lil-shop/backend/ent/lineitem"
	"github.com/awolk/lil-shop/backend/ent/order"
	"github.com/awolk/lil-shop/backend/ent/orderlineitem"
	"github.com/awolk/lil-shop/backend/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
)

// OrderLineItemQuery is the builder for querying OrderLineItem entities.
type OrderLineItemQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.OrderLineItem
	// eager-loading edges.
	withItem             *ItemQuery
	withOrder            *OrderQuery
	withOriginalLineItem *LineItemQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (oliq *OrderLineItemQuery) Where(ps ...predicate.OrderLineItem) *OrderLineItemQuery {
	oliq.predicates = append(oliq.predicates, ps...)
	return oliq
}

// Limit adds a limit step to the query.
func (oliq *OrderLineItemQuery) Limit(limit int) *OrderLineItemQuery {
	oliq.limit = &limit
	return oliq
}

// Offset adds an offset step to the query.
func (oliq *OrderLineItemQuery) Offset(offset int) *OrderLineItemQuery {
	oliq.offset = &offset
	return oliq
}

// Order adds an order step to the query.
func (oliq *OrderLineItemQuery) Order(o ...OrderFunc) *OrderLineItemQuery {
	oliq.order = append(oliq.order, o...)
	return oliq
}

// QueryItem chains the current query on the item edge.
func (oliq *OrderLineItemQuery) QueryItem() *ItemQuery {
	query := &ItemQuery{config: oliq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oliq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderlineitem.Table, orderlineitem.FieldID, oliq.sqlQuery()),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderlineitem.ItemTable, orderlineitem.ItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(oliq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrder chains the current query on the order edge.
func (oliq *OrderLineItemQuery) QueryOrder() *OrderQuery {
	query := &OrderQuery{config: oliq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oliq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderlineitem.Table, orderlineitem.FieldID, oliq.sqlQuery()),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderlineitem.OrderTable, orderlineitem.OrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(oliq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOriginalLineItem chains the current query on the original_line_item edge.
func (oliq *OrderLineItemQuery) QueryOriginalLineItem() *LineItemQuery {
	query := &LineItemQuery{config: oliq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oliq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderlineitem.Table, orderlineitem.FieldID, oliq.sqlQuery()),
			sqlgraph.To(lineitem.Table, lineitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderlineitem.OriginalLineItemTable, orderlineitem.OriginalLineItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(oliq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderLineItem entity in the query. Returns *NotFoundError when no orderlineitem was found.
func (oliq *OrderLineItemQuery) First(ctx context.Context) (*OrderLineItem, error) {
	olis, err := oliq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(olis) == 0 {
		return nil, &NotFoundError{orderlineitem.Label}
	}
	return olis[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oliq *OrderLineItemQuery) FirstX(ctx context.Context) *OrderLineItem {
	oli, err := oliq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return oli
}

// FirstID returns the first OrderLineItem id in the query. Returns *NotFoundError when no id was found.
func (oliq *OrderLineItemQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oliq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderlineitem.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (oliq *OrderLineItemQuery) FirstXID(ctx context.Context) uuid.UUID {
	id, err := oliq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only OrderLineItem entity in the query, returns an error if not exactly one entity was returned.
func (oliq *OrderLineItemQuery) Only(ctx context.Context) (*OrderLineItem, error) {
	olis, err := oliq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(olis) {
	case 1:
		return olis[0], nil
	case 0:
		return nil, &NotFoundError{orderlineitem.Label}
	default:
		return nil, &NotSingularError{orderlineitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oliq *OrderLineItemQuery) OnlyX(ctx context.Context) *OrderLineItem {
	oli, err := oliq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return oli
}

// OnlyID returns the only OrderLineItem id in the query, returns an error if not exactly one id was returned.
func (oliq *OrderLineItemQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oliq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderlineitem.Label}
	default:
		err = &NotSingularError{orderlineitem.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (oliq *OrderLineItemQuery) OnlyXID(ctx context.Context) uuid.UUID {
	id, err := oliq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderLineItems.
func (oliq *OrderLineItemQuery) All(ctx context.Context) ([]*OrderLineItem, error) {
	if err := oliq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return oliq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (oliq *OrderLineItemQuery) AllX(ctx context.Context) []*OrderLineItem {
	olis, err := oliq.All(ctx)
	if err != nil {
		panic(err)
	}
	return olis
}

// IDs executes the query and returns a list of OrderLineItem ids.
func (oliq *OrderLineItemQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := oliq.Select(orderlineitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oliq *OrderLineItemQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := oliq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oliq *OrderLineItemQuery) Count(ctx context.Context) (int, error) {
	if err := oliq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return oliq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (oliq *OrderLineItemQuery) CountX(ctx context.Context) int {
	count, err := oliq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oliq *OrderLineItemQuery) Exist(ctx context.Context) (bool, error) {
	if err := oliq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return oliq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (oliq *OrderLineItemQuery) ExistX(ctx context.Context) bool {
	exist, err := oliq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oliq *OrderLineItemQuery) Clone() *OrderLineItemQuery {
	return &OrderLineItemQuery{
		config:     oliq.config,
		limit:      oliq.limit,
		offset:     oliq.offset,
		order:      append([]OrderFunc{}, oliq.order...),
		unique:     append([]string{}, oliq.unique...),
		predicates: append([]predicate.OrderLineItem{}, oliq.predicates...),
		// clone intermediate query.
		sql:  oliq.sql.Clone(),
		path: oliq.path,
	}
}

//  WithItem tells the query-builder to eager-loads the nodes that are connected to
// the "item" edge. The optional arguments used to configure the query builder of the edge.
func (oliq *OrderLineItemQuery) WithItem(opts ...func(*ItemQuery)) *OrderLineItemQuery {
	query := &ItemQuery{config: oliq.config}
	for _, opt := range opts {
		opt(query)
	}
	oliq.withItem = query
	return oliq
}

//  WithOrder tells the query-builder to eager-loads the nodes that are connected to
// the "order" edge. The optional arguments used to configure the query builder of the edge.
func (oliq *OrderLineItemQuery) WithOrder(opts ...func(*OrderQuery)) *OrderLineItemQuery {
	query := &OrderQuery{config: oliq.config}
	for _, opt := range opts {
		opt(query)
	}
	oliq.withOrder = query
	return oliq
}

//  WithOriginalLineItem tells the query-builder to eager-loads the nodes that are connected to
// the "original_line_item" edge. The optional arguments used to configure the query builder of the edge.
func (oliq *OrderLineItemQuery) WithOriginalLineItem(opts ...func(*LineItemQuery)) *OrderLineItemQuery {
	query := &LineItemQuery{config: oliq.config}
	for _, opt := range opts {
		opt(query)
	}
	oliq.withOriginalLineItem = query
	return oliq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderLineItem.Query().
//		GroupBy(orderlineitem.FieldQuantity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (oliq *OrderLineItemQuery) GroupBy(field string, fields ...string) *OrderLineItemGroupBy {
	group := &OrderLineItemGroupBy{config: oliq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := oliq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return oliq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//	}
//
//	client.OrderLineItem.Query().
//		Select(orderlineitem.FieldQuantity).
//		Scan(ctx, &v)
//
func (oliq *OrderLineItemQuery) Select(field string, fields ...string) *OrderLineItemSelect {
	selector := &OrderLineItemSelect{config: oliq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := oliq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return oliq.sqlQuery(), nil
	}
	return selector
}

func (oliq *OrderLineItemQuery) prepareQuery(ctx context.Context) error {
	if oliq.path != nil {
		prev, err := oliq.path(ctx)
		if err != nil {
			return err
		}
		oliq.sql = prev
	}
	return nil
}

func (oliq *OrderLineItemQuery) sqlAll(ctx context.Context) ([]*OrderLineItem, error) {
	var (
		nodes       = []*OrderLineItem{}
		withFKs     = oliq.withFKs
		_spec       = oliq.querySpec()
		loadedTypes = [3]bool{
			oliq.withItem != nil,
			oliq.withOrder != nil,
			oliq.withOriginalLineItem != nil,
		}
	)
	if oliq.withItem != nil || oliq.withOrder != nil || oliq.withOriginalLineItem != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, orderlineitem.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &OrderLineItem{config: oliq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, oliq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := oliq.withItem; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*OrderLineItem)
		for i := range nodes {
			if fk := nodes[i].order_line_item_item; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_line_item_item" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Item = n
			}
		}
	}

	if query := oliq.withOrder; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*OrderLineItem)
		for i := range nodes {
			if fk := nodes[i].order_order_line_items; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(order.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_order_line_items" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Order = n
			}
		}
	}

	if query := oliq.withOriginalLineItem; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*OrderLineItem)
		for i := range nodes {
			if fk := nodes[i].order_line_item_original_line_item; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(lineitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_line_item_original_line_item" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OriginalLineItem = n
			}
		}
	}

	return nodes, nil
}

func (oliq *OrderLineItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oliq.querySpec()
	return sqlgraph.CountNodes(ctx, oliq.driver, _spec)
}

func (oliq *OrderLineItemQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := oliq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (oliq *OrderLineItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderlineitem.Table,
			Columns: orderlineitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: orderlineitem.FieldID,
			},
		},
		From:   oliq.sql,
		Unique: true,
	}
	if ps := oliq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oliq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oliq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oliq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oliq *OrderLineItemQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(oliq.driver.Dialect())
	t1 := builder.Table(orderlineitem.Table)
	selector := builder.Select(t1.Columns(orderlineitem.Columns...)...).From(t1)
	if oliq.sql != nil {
		selector = oliq.sql
		selector.Select(selector.Columns(orderlineitem.Columns...)...)
	}
	for _, p := range oliq.predicates {
		p(selector)
	}
	for _, p := range oliq.order {
		p(selector)
	}
	if offset := oliq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oliq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderLineItemGroupBy is the builder for group-by OrderLineItem entities.
type OrderLineItemGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oligb *OrderLineItemGroupBy) Aggregate(fns ...AggregateFunc) *OrderLineItemGroupBy {
	oligb.fns = append(oligb.fns, fns...)
	return oligb
}

// Scan applies the group-by query and scan the result into the given value.
func (oligb *OrderLineItemGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := oligb.path(ctx)
	if err != nil {
		return err
	}
	oligb.sql = query
	return oligb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (oligb *OrderLineItemGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := oligb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (oligb *OrderLineItemGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(oligb.fields) > 1 {
		return nil, errors.New("ent: OrderLineItemGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := oligb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (oligb *OrderLineItemGroupBy) StringsX(ctx context.Context) []string {
	v, err := oligb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (oligb *OrderLineItemGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(oligb.fields) > 1 {
		return nil, errors.New("ent: OrderLineItemGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := oligb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (oligb *OrderLineItemGroupBy) IntsX(ctx context.Context) []int {
	v, err := oligb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (oligb *OrderLineItemGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(oligb.fields) > 1 {
		return nil, errors.New("ent: OrderLineItemGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := oligb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (oligb *OrderLineItemGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := oligb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (oligb *OrderLineItemGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(oligb.fields) > 1 {
		return nil, errors.New("ent: OrderLineItemGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := oligb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (oligb *OrderLineItemGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := oligb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oligb *OrderLineItemGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := oligb.sqlQuery().Query()
	if err := oligb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (oligb *OrderLineItemGroupBy) sqlQuery() *sql.Selector {
	selector := oligb.sql
	columns := make([]string, 0, len(oligb.fields)+len(oligb.fns))
	columns = append(columns, oligb.fields...)
	for _, fn := range oligb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(oligb.fields...)
}

// OrderLineItemSelect is the builder for select fields of OrderLineItem entities.
type OrderLineItemSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (olis *OrderLineItemSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := olis.path(ctx)
	if err != nil {
		return err
	}
	olis.sql = query
	return olis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (olis *OrderLineItemSelect) ScanX(ctx context.Context, v interface{}) {
	if err := olis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (olis *OrderLineItemSelect) Strings(ctx context.Context) ([]string, error) {
	if len(olis.fields) > 1 {
		return nil, errors.New("ent: OrderLineItemSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := olis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (olis *OrderLineItemSelect) StringsX(ctx context.Context) []string {
	v, err := olis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (olis *OrderLineItemSelect) Ints(ctx context.Context) ([]int, error) {
	if len(olis.fields) > 1 {
		return nil, errors.New("ent: OrderLineItemSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := olis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (olis *OrderLineItemSelect) IntsX(ctx context.Context) []int {
	v, err := olis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (olis *OrderLineItemSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(olis.fields) > 1 {
		return nil, errors.New("ent: OrderLineItemSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := olis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (olis *OrderLineItemSelect) Float64sX(ctx context.Context) []float64 {
	v, err := olis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (olis *OrderLineItemSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(olis.fields) > 1 {
		return nil, errors.New("ent: OrderLineItemSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := olis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (olis *OrderLineItemSelect) BoolsX(ctx context.Context) []bool {
	v, err := olis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (olis *OrderLineItemSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := olis.sqlQuery().Query()
	if err := olis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (olis *OrderLineItemSelect) sqlQuery() sql.Querier {
	selector := olis.sql
	selector.Select(selector.Columns(olis.fields...)...)
	return selector
}
