// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/awolk/lil-shop/backend/ent/order"
	"github.com/awolk/lil-shop/backend/ent/orderlineitem"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetPaymentIntentID sets the payment_intent_id field.
func (oc *OrderCreate) SetPaymentIntentID(s string) *OrderCreate {
	oc.mutation.SetPaymentIntentID(s)
	return oc
}

// SetID sets the id field.
func (oc *OrderCreate) SetID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// AddOrderLineItemIDs adds the order_line_items edge to OrderLineItem by ids.
func (oc *OrderCreate) AddOrderLineItemIDs(ids ...uuid.UUID) *OrderCreate {
	oc.mutation.AddOrderLineItemIDs(ids...)
	return oc
}

// AddOrderLineItems adds the order_line_items edges to OrderLineItem.
func (oc *OrderCreate) AddOrderLineItems(o ...*OrderLineItem) *OrderCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOrderLineItemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	if _, ok := oc.mutation.PaymentIntentID(); !ok {
		return nil, errors.New("ent: missing required field \"payment_intent_id\"")
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := order.DefaultID()
		oc.mutation.SetID(v)
	}
	var (
		err  error
		node *Order
	)
	if len(oc.hooks) == 0 {
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	var (
		o     = &Order{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: order.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: order.FieldID,
			},
		}
	)
	if id, ok := oc.mutation.ID(); ok {
		o.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.PaymentIntentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldPaymentIntentID,
		})
		o.PaymentIntentID = value
	}
	if nodes := oc.mutation.OrderLineItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderLineItemsTable,
			Columns: []string{order.OrderLineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: orderlineitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}
