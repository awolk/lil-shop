// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/awolk/lil-shop/backend/ent/cart"
	"github.com/awolk/lil-shop/backend/ent/item"
	"github.com/awolk/lil-shop/backend/ent/lineitem"
	"github.com/awolk/lil-shop/backend/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
)

// LineItemUpdate is the builder for updating LineItem entities.
type LineItemUpdate struct {
	config
	hooks      []Hook
	mutation   *LineItemMutation
	predicates []predicate.LineItem
}

// Where adds a new predicate for the builder.
func (liu *LineItemUpdate) Where(ps ...predicate.LineItem) *LineItemUpdate {
	liu.predicates = append(liu.predicates, ps...)
	return liu
}

// SetQuantity sets the quantity field.
func (liu *LineItemUpdate) SetQuantity(i int) *LineItemUpdate {
	liu.mutation.ResetQuantity()
	liu.mutation.SetQuantity(i)
	return liu
}

// AddQuantity adds i to quantity.
func (liu *LineItemUpdate) AddQuantity(i int) *LineItemUpdate {
	liu.mutation.AddQuantity(i)
	return liu
}

// SetItemID sets the item edge to Item by id.
func (liu *LineItemUpdate) SetItemID(id uuid.UUID) *LineItemUpdate {
	liu.mutation.SetItemID(id)
	return liu
}

// SetItem sets the item edge to Item.
func (liu *LineItemUpdate) SetItem(i *Item) *LineItemUpdate {
	return liu.SetItemID(i.ID)
}

// SetCartID sets the cart edge to Cart by id.
func (liu *LineItemUpdate) SetCartID(id uuid.UUID) *LineItemUpdate {
	liu.mutation.SetCartID(id)
	return liu
}

// SetCart sets the cart edge to Cart.
func (liu *LineItemUpdate) SetCart(c *Cart) *LineItemUpdate {
	return liu.SetCartID(c.ID)
}

// Mutation returns the LineItemMutation object of the builder.
func (liu *LineItemUpdate) Mutation() *LineItemMutation {
	return liu.mutation
}

// ClearItem clears the item edge to Item.
func (liu *LineItemUpdate) ClearItem() *LineItemUpdate {
	liu.mutation.ClearItem()
	return liu
}

// ClearCart clears the cart edge to Cart.
func (liu *LineItemUpdate) ClearCart() *LineItemUpdate {
	liu.mutation.ClearCart()
	return liu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (liu *LineItemUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := liu.mutation.Quantity(); ok {
		if err := lineitem.QuantityValidator(v); err != nil {
			return 0, &ValidationError{Name: "quantity", err: fmt.Errorf("ent: validator failed for field \"quantity\": %w", err)}
		}
	}

	if _, ok := liu.mutation.ItemID(); liu.mutation.ItemCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"item\"")
	}

	if _, ok := liu.mutation.CartID(); liu.mutation.CartCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"cart\"")
	}
	var (
		err      error
		affected int
	)
	if len(liu.hooks) == 0 {
		affected, err = liu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LineItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			liu.mutation = mutation
			affected, err = liu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(liu.hooks) - 1; i >= 0; i-- {
			mut = liu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, liu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (liu *LineItemUpdate) SaveX(ctx context.Context) int {
	affected, err := liu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (liu *LineItemUpdate) Exec(ctx context.Context) error {
	_, err := liu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (liu *LineItemUpdate) ExecX(ctx context.Context) {
	if err := liu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (liu *LineItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lineitem.Table,
			Columns: lineitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: lineitem.FieldID,
			},
		},
	}
	if ps := liu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := liu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lineitem.FieldQuantity,
		})
	}
	if value, ok := liu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lineitem.FieldQuantity,
		})
	}
	if liu.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lineitem.ItemTable,
			Columns: []string{lineitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := liu.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lineitem.ItemTable,
			Columns: []string{lineitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if liu.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lineitem.CartTable,
			Columns: []string{lineitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := liu.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lineitem.CartTable,
			Columns: []string{lineitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, liu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lineitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LineItemUpdateOne is the builder for updating a single LineItem entity.
type LineItemUpdateOne struct {
	config
	hooks    []Hook
	mutation *LineItemMutation
}

// SetQuantity sets the quantity field.
func (liuo *LineItemUpdateOne) SetQuantity(i int) *LineItemUpdateOne {
	liuo.mutation.ResetQuantity()
	liuo.mutation.SetQuantity(i)
	return liuo
}

// AddQuantity adds i to quantity.
func (liuo *LineItemUpdateOne) AddQuantity(i int) *LineItemUpdateOne {
	liuo.mutation.AddQuantity(i)
	return liuo
}

// SetItemID sets the item edge to Item by id.
func (liuo *LineItemUpdateOne) SetItemID(id uuid.UUID) *LineItemUpdateOne {
	liuo.mutation.SetItemID(id)
	return liuo
}

// SetItem sets the item edge to Item.
func (liuo *LineItemUpdateOne) SetItem(i *Item) *LineItemUpdateOne {
	return liuo.SetItemID(i.ID)
}

// SetCartID sets the cart edge to Cart by id.
func (liuo *LineItemUpdateOne) SetCartID(id uuid.UUID) *LineItemUpdateOne {
	liuo.mutation.SetCartID(id)
	return liuo
}

// SetCart sets the cart edge to Cart.
func (liuo *LineItemUpdateOne) SetCart(c *Cart) *LineItemUpdateOne {
	return liuo.SetCartID(c.ID)
}

// Mutation returns the LineItemMutation object of the builder.
func (liuo *LineItemUpdateOne) Mutation() *LineItemMutation {
	return liuo.mutation
}

// ClearItem clears the item edge to Item.
func (liuo *LineItemUpdateOne) ClearItem() *LineItemUpdateOne {
	liuo.mutation.ClearItem()
	return liuo
}

// ClearCart clears the cart edge to Cart.
func (liuo *LineItemUpdateOne) ClearCart() *LineItemUpdateOne {
	liuo.mutation.ClearCart()
	return liuo
}

// Save executes the query and returns the updated entity.
func (liuo *LineItemUpdateOne) Save(ctx context.Context) (*LineItem, error) {
	if v, ok := liuo.mutation.Quantity(); ok {
		if err := lineitem.QuantityValidator(v); err != nil {
			return nil, &ValidationError{Name: "quantity", err: fmt.Errorf("ent: validator failed for field \"quantity\": %w", err)}
		}
	}

	if _, ok := liuo.mutation.ItemID(); liuo.mutation.ItemCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"item\"")
	}

	if _, ok := liuo.mutation.CartID(); liuo.mutation.CartCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"cart\"")
	}
	var (
		err  error
		node *LineItem
	)
	if len(liuo.hooks) == 0 {
		node, err = liuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LineItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			liuo.mutation = mutation
			node, err = liuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(liuo.hooks) - 1; i >= 0; i-- {
			mut = liuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, liuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (liuo *LineItemUpdateOne) SaveX(ctx context.Context) *LineItem {
	li, err := liuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return li
}

// Exec executes the query on the entity.
func (liuo *LineItemUpdateOne) Exec(ctx context.Context) error {
	_, err := liuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (liuo *LineItemUpdateOne) ExecX(ctx context.Context) {
	if err := liuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (liuo *LineItemUpdateOne) sqlSave(ctx context.Context) (li *LineItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lineitem.Table,
			Columns: lineitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: lineitem.FieldID,
			},
		},
	}
	id, ok := liuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LineItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := liuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lineitem.FieldQuantity,
		})
	}
	if value, ok := liuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: lineitem.FieldQuantity,
		})
	}
	if liuo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lineitem.ItemTable,
			Columns: []string{lineitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := liuo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lineitem.ItemTable,
			Columns: []string{lineitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if liuo.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lineitem.CartTable,
			Columns: []string{lineitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := liuo.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lineitem.CartTable,
			Columns: []string{lineitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	li = &LineItem{config: liuo.config}
	_spec.Assign = li.assignValues
	_spec.ScanValues = li.scanValues()
	if err = sqlgraph.UpdateNode(ctx, liuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lineitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return li, nil
}
